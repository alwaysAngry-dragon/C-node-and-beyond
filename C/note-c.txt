%d/i, %c, %s, %f, %lf, %lu, %p(used for printing memory address)

In C, when you divide two integers (e.g., 5 / 2), the result is an integer division.
If any number is floatintg point number (float & double), the output will be floating point number.

- Each memory location stores one byte.

Address of an element in memory RAM:
    &variableName;
    &arr[index]; // address of array elements

    - how to store memory address:
        
        memory address has to be always stored in Pointers
                int y = 5;
                int *p = (int *)&y;

                printf("location of x: %p\n", &y);
                printf("value of p: %p\n", p);


Size of Element in memory:
    the sizef returns the size of an element in memory
    sizeof(variableName);

    ** caveat when size of is applied to an pointer, like in case of dynamic arrays
        - int size = 4;
        - int *arr = (int *)(malloc(size * sizeof(int)));
        - sizeof(arr); 8 bytes in a 64 bit pointer and not 16 bytes.  

scope:
    In c variables have block scope.
    {
        int x; x will be visible only inside this block
    }

    Also inner block variables will shadow outer variables
    {
        int x;
        {
            int x; // inner x variable will shadow outer x variable
        }
    }

bool: 
    true is 1 
    false is 0

    0 represents false .
    Any non-zero value (typically 1) represents true
    1 (or any other number that is not 0) represents true


Strings:
    Are string mutalbe: 
            char str[] = "Helo";
            - str is a constant pointer that points to the  memory location of the first string element of str in memory
            - str = someOtherString; this will generate error

        str[2] = "j"; this will work.


    This concept also applies to arrays    

    - strlen(str); gives the length of the array excluding the null character '\0' in the end;


    reading string:
        both - scanf and fgets appends \0 null terminator to the end of the string

        scanf stops when a white space or \n is encountered   
        fgets stops when a \n is encountered the \n is also added to the string if space is there
        fgets always adds the \0 to the end, 
        scnaf will overflow the location if space is not there to add \0, the null terminator will be added to memory outside the bounds of the array causing buffer overflow 
        scanf leaves any leftover characters(that exceed the limit) (e.g., spaces, newlines) in the input buffer, which can interfere with subsequent input operations. 

        char name[5]
        scanf("%s", name);

        

1. How a C Program is Built
    The process of building a C program involves multiple stages:

a. Compilation
    The compiler takes your C source code (.c file) and translates it into object code (machine code, but not yet executable).
    During this stage, the compiler checks for syntax errors, type mismatches, and other issues in your code.
    If there are no errors, the compiler produces an object file (e.g., program.o).

    gcc -c program.c

b. Linking
    The linker combines the object files produced by the compiler with any required libraries (e.g., the C standard library) to create a single executable file .
    The linker also resolves references to functions and symbols, including the main function.
    If the linker cannot find the main function, it throws an error because main is the entry point required to create a valid executable.

    gcc program.o -o program

c. Execution (not taking about the CPU executing the instruction)
Once the executable is created, the operating system loads and runs the program.



Is main function required?
    Yes. However in kernel programming and embedded sytems there are workarounds.

Why return 0 from main?
    - The compiler maps the return 0 code in main() to a system call.
    - Return 0 is actually making system call to the OS
    - This switches execution from user mode to kernel mode, allowing the OS to take over.
    - The OS uses exit codes to clean up resources (memory, file handles) and log outcomes.


Does iteration in for loop create a different execution context like in JS ?

    - No, no new execution context is created.

    - example

    for (int i = 1; i <= day; i++)
        {
            printf("Day %d: ", i);
            printf("\t -- Memory location of %d: %p\n", i, &day); // the memory address of i will be same.
        }


Arrays: Static
   
    myArr below is actually a pointer constant pointing to the memory location of first myArr elemenet

    >     int myArr[] = {1, 2, 3, 4}; Since the array is statically allocated, its size cannot change at runtime.

    >     int myArr[4]; myArr[0] = 1; Since the array is statically allocated, its size cannot change at runtime.

    > sizeof(myArr); returns the size of the array in memory, this will not work for dynamic arrays 

    >     array length: sizeOf(arr)/sizeOf(arr[0]);

                         sizeof(arr)/sizeof(arr[0]) will not work for dynamic arrays (those allocated with malloc, calloc, or realloc), or for array passed to functions.


    In C, arrays don't have bounds checking:-
    
        C does not enforce array bounds checking at compile time. The compiler trusts that you, the programmer, will access valid indices. For example:
            int myArr[] = {1, 2, 3, 4}; // Size = 4 elements (indices 0 to 3)
            myArr[33] = 33; // Index 33 is out of bounds → No compiler error!


            When you write to myArr[33], you’re accessing memory outside the array’s allocated space. This is undefined behavior:

                    No Guarantees: The program might crash, work "correctly," corrupt data, or behave unpredictably.

                        Depends on Memory Layout: If the address myArr[33] points to:

                        Unallocated memory: Segmentation fault (crash).

                        Unused memory: The write "succeeds" but corrupts other variables or program state.

                        Critical memory: Overwrites data used by the OS or other processes (very dangerous).


Pointers:

    Anytime we want to store memory address we need to use pointer

    int foo = 34;
    int *p = &foo; (preferred style) or 
    int* p = &foo;

    printf("Address of foo: %p\n", &foo);
    printf("Value of p: %p\n", p);   
    printf("Value at p: %d\n", *p); // 34, dereference the pointer


    Defernecing the pointer:

        The expression *(myNumber) dereferences the pointer, meaning it retrieves the value stored at the memory location pointed to by myNumber

    > When you write *(myNumbers + 1), the compiler interprets this as "move the pointer forward by one element."
    > In C, when you perform arithmetic on a pointer (e.g., adding or subtracting integers), the compiler automatically adjusts the pointer based on the type of data it points to . This ensures that pointer arithmetic works correctly for arrays of any data type. 

        int myNumbers[] = {1,2,3,4};

        printf("%d",*(myNumbers + 1)); prints the seconde element 

        // explanation
        myNumbers + 1 = myNumbers + sizeof(int) * 1; since it is int pointer
              = myNumbers + 4 bytes; 


Returning arrays from function:
    In C directly returning arrays function is not possible.

    There are three useful approaches
        - Approach 1 (dynamic memory allocation) if the array size is determined at runtime and you need to return the array.
        - Approach 2 (passing an array as an argument) if the array is pre-allocated and you want to avoid dynamic memory management.
        - Approach 3 (struct encapsulation) if you need to return both the array and its size.


Pending: Returning arrays from function.



Arrays Dynamic:

    > using malloc

        - int *arr = malloc(4 * sizeof(int));
          if(arr = NULL){ // if memory allocation fails
            // handle error
          }

        printf("%zu\n", sizeof(arr)); // Output: 8 (on 64-bit systems)

    > using calloc

        // Dynamically allocate memory for the array using calloc
        int *arr = (int *)calloc(size, sizeof(int)); // same as malloc but all elements are initialized to 0

    Dynamically allocated memory (via malloc, calloc, or realloc) exists in the heap, and its size is not tracked by the compiler.  
    The pointer returned by malloc only contains the address of the allocated memory block. There is no metadata stored about the size of the allocation.


    > resize dynamic arrays:

    // Resize the array using realloc
        arr = (int *)realloc(arr, newSize * sizeof(int));
        if (arr == NULL) {
            printf("Memory reallocation failed!\n");
            return 1;
        }

Memory leaks and free()

    - When you allocate memory using malloc/calloc, the memory is allocated on the heap , 
    - which has a lifetime that extends beyond the scope of the function in which it was allocated.
    - The memory remains allocated until it is explicitly freed using free. 
    - If you don't free it, the memory will persist for the entire duration of the program's execution creating.
    - The value in the location will persists if we do not use free() and create memory leaks;



Structures:

    - Structures can be stored in heap, stack or or even in the data segment (for global/static variables). It depends on where the structure is declared.

    - The size of a structure is equal to the total size of its members (plus any padding for alignment).

    1) Stored in stack:
        - If a structure is declared as a local variable inside a function, it is stored in the stack .
        - When the function returns, the memory for the structur is automatically deallocated (popped off the stack).


    2) Stored in heap:
        - If crated dynamically using malloc:

                struct MyStruct *s = (struct MyStruct *)malloc(sizeof(struct MyStruct));

                The pointer s itself is stored on the stack , but the actual structure data resides in the heap .

        - You must explicitly free the memory using free to avoid memory leaks.
                free(s);

    3) Data Segment storage:

        - If a structure is declared as a global variable or a static variable , it is stored in the data segment of memory. 

                // Static structure, also stored in the data segment
                static struct MyStruct staticStruct = {30, 40.5};

                // Global structure, stored in the data segment, declared outside any functions.
                struct MyStruct globalStruct = {10, 20.5};


    > Copying structures:

        - the value of s1 is copied to s2

            struct myStructure s1 = {13, 'B', "Some text"};
            struct myStructure s2;

            s2 = s1; // now s1 and s2 are different structures 

    > Using -> to access structure elements:
        
        struct MyStruct {
                 int x;
                float y;
        };

        void myFunction() {
            struct MyStruct s;          // Local structure variable
            struct MyStruct *p = &s;    // Pointer to the structure

            p->x = 10;  // Access `x` through the pointer
            p->y = 20.5; // Access `y` through the pointer
        }
         


Stack Vs Heap Vs Data Segment in memory of C program?

    The text segment stores the program's machine code.
    The data segment stores global and static variables (initialized and uninitialized).
    The heap is used for dynamic memory allocation and is managed manually.
    The stack stores local variables and function call information and is managed automatically.




lvalues ?
    In C, an lvalue is something that refers to a memory location and can appear on the left-hand side of an assignment (=).
    Examples of lvalues include variables like x, array elements, or dereferenced pointers (e.g., *ptr).



Input Buffers:
    Our program doesn't directly receive the keystrokes. 
    Instead, it reads input from the buffer when you use functions like scanf, getchar, or fgets.   

    Buffer Behavior :
        The input buffer stores the characters until they are read by your program.
        Once a character is read, it is removed from the buffer.



Comparisions of different types:

    - In C, comparisons (like ==, !=, <, >, etc.) require both operands to be numeric values or values that can be interpreted numerically.
    - This is because comparisons in C are fundamentally based on numeric equivalence or ordering.

    - When you compare two operands of different types (e.g., a pointer and an integer, or a character and an integer), 
      the C compiler attempts to convert one or both operands into compatible numeric forms so that the comparison can proceed. This process is governed by type conversion rules in C.

    Integer Promotions :
        Smaller integer types (e.g., char, short) are promoted to int or unsigned int before the compariso


    Pointer Comparisons :
        If one operand is a pointer and the other is an integer, the integer is treated as a pointer (memory address).

                int x = 10;
                printf("%d", &x == 0); // Compares the address of x with null pointer (0)

    
    Boolean Comparisons :
        In C, true is 1 and false is 0. When comparing a boolean value with another type, the boolean is treated as an integer (0 or 1).

