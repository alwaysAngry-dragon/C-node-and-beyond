-- Low level: sys calls POSIX & Win32

> read, write, open, close in POSIX:
    
    - For POSIX systems (like Linux or macOS), the functions open(), read(), write(), 
     and close() are part of the C standard library (like glibc)


> CreateFile, ReadFile, WriteFile in Windows:

    - Functions like CreateFile, ReadFile, WriteFile are part of the Win32 API (in kernel32.dll).

    - ** note: these are not part of the C standard library unlike read, open, close etc in POSIX

        

Q) Are read, write, open, close etc the actual sys calls ?
A) NO, 

    > POSIX:

        these are wrappers available to the C library (POSIX).
        
        -The key point here is that when you call open() in your code, 
        the C library handles some setup, then triggers the actual system call to the kernel. 
        
        - The same applies to read and write. The library might add some error handling or buffering, 
        but ultimately they invoke the kernel's system calls.


Q) Are  CreateFile, ReadFile, WriteFile in Windows actual syscalls ?
A) NO,

    > Windows:

        - CreateFile, ReadFile, WriteFile are Win32 API wrappers for Native API syscalls like NtCreateFile.




Q) Are CreateFile, ReadFile, WriteFile in Windows part of the C standard library?
A) NO,
    - No, CreateFile, ReadFile, and WriteFile are not part of the C standard library. 
    They are specific to the Windows API (Win32) and are provided by the Windows operating system itself.



    > How They Relate to Syscalls

        C Standard Library(fread) → Win32 API(ReadFile) → Native API → Syscall
        Example:
        fopen → Calls CreateFile (Win32) → Calls NtCreateFile (Native API) → Triggers syscall instruction.

        i.e   Win32 API (kernel32.dll) → Calls the Native API (ntdll.dll).

              Native API (ntdll.dll) → Executes the actual syscall instruction.


    >       C Standard Library vs. Windows API
    
            Feature	                C Standard Library	                            Windows API (Win32)
            Purpose	                Portable C functions (e.g., fopen, fread)	    Windows-specific low-level I/O (e.g., CreateFile)
            Header	                <stdio.h>	                                    <windows.h>
            File I/O Functions	    fopen, fread, fwrite, fclose	                CreateFile, ReadFile, WriteFile, CloseHandle
            Portability	            Works on all platforms (Linux, macOS, Windows)	Windows-only
            Underlying Mechanism	May use OS-specific syscalls internally	        Directly wraps Windows Native API (e.g., NtCreateFile)



    Q) How are the kernel32.dll dependencies get resolved in Windows systems:

        1) Compile-Time:

                - When you compile your C program, the compiler sees the declaration of CreateFileA in <windows.h> 
                but doesn’t embed the actual function code.

                - Instead, it marks the call as an external reference to kernel32.dll

                If your compiler doesn’t auto-link kernel32.lib, you can explicitly link it:
                        gcc your_program.c -o output -lkernel32

        
        2) Runtime (When the Program Runs):

                - When your program starts, the Windows loader:

                    - Loads kernel32.dll into memory (if not already loaded).

                    - Resolves the address of CreateFileA inside kernel32.dll.

                    - Patches your program’s call to CreateFileA with the correct memory address.

        3) Execution:

                - When your program calls CreateFileA, the CPU jumps to the actual function inside kernel32.dll.


            Windows loader resolves these dependencies:

                   - Your executable → Loads ucrtbase.dll (C runtime) → Loads kernel32.dll (Win32 API).

                   - The addresses of CreateFile, ReadFile, etc., are resolved at runtime.

               



        Example: From fopen to NtCreateFile
        
                fopen("file.txt", "r") (in ucrtbase.dll)
                → Calls CreateFile("file.txt", GENERIC_READ, ...) (in kernel32.dll)
                → Calls NtCreateFile (in ntdll.dll)
                → Executes syscall 0x55 (example)
                → Kernel handles the request.

                Later, fread calls ReadFile (in kernel32.dll)
                → Calls NtReadFile (in ntdll.dll)
                → Executes syscall 0x06 (example)
                → Kernel reads the file.

> POSIX Systems (Linux/macOS)


    System Calls vs. Library Functions

    > System Calls:

            - These are direct requests to the kernel, 
              executed via a software interrupt (e.g., syscall instruction on x86-64).

            - Examples: sys_open, sys_read, sys_write, sys_close.

            - These are kernel-level functions and are not directly called by user programs.

            - Each system call has a unique identifier (e.g., __NR_open on Linux).

    > Library Wrappers:

            - Functions like open, read, write are provided by the C standard library (e.g., glibc on Linux, libSystem on macOS).

            They:

                   - Prepare arguments for the system call.

                   - Invoke the system call using architecture-specific mechanisms (e.g., syscall instruction).

                   - Handle errors and set errno.


            Example:

                    Example: open() in glibc:

                        int open(const char *pathname, int flags, mode_t mode) {
                                return syscall(__NR_open, pathname, flags, mode);
                            }

                        - syscall() is a glibc function that triggers the actual system call.

                        - The kernel switches to kernel mode, executes sys_open, and returns the result.


        

Q) Does fread, fwrite, fgets, fprintf etc use sys calls in the implementation:
A) Yes.

    - The C Standard I/O functions (fread, fwrite, fprintf, etc.) 
      are higher-level abstractions built on top of low-level system calls 
      like open, read, write, and close.

    - It's important to clarify that the standard library adds a layer of buffering for efficiency, 
      which is a key difference.

    - when you use fopen(), it calls open() to get a file descriptor, 
      then wraps it in a FILE structure that includes a buffer. 
      Subsequent reads and writes using fread or fwrite operate on this buffer, 
      reducing the number of actual system calls. 
      The buffer is flushed to the OS when it's full or when explicitly requested, 
      which then triggers the write system call.



    > Example Workflow: fread
        
        - fopen calls open() to get a file descriptor.

        - fread reads data from the buffer (not directly from the disk).

        - If the buffer is empty, it triggers a read() system call to refill the buffer (e.g., 4096 bytes at once).

        - Subsequent fread calls use the buffered data until it’s exhausted.

        - fclose flushes any pending writes and calls close().




> How Standard I/O Functions Use System Calls
        Standard I/O Function       Underlying System Calls                 Purpose
        fopen()	                       open()	                            Opens the file and initializes the FILE struct with a buffer.
        fread()	                       read() (when buffer is empty)	    Reads data in large chunks into a buffer, then serves smaller requests.
        fwrite()	                   write() (when buffer is full)	    Buffers data and writes it in bulk to reduce system calls.
        fflush()	                   write()	                            Forces the buffer to be written to the file.
        fclose()	                   close()	                            Closes the file descriptor and frees the buffer.


> Key Differences
        Aspect	            Standard I/O (fread, fwrite)	            Low-Level I/O (read, write)
        Buffering	        Buffered (e.g., 4KB chunks)	                No buffering (direct disk access)
        Performance	        Better for small, frequent I/O	            Better for large, raw data transfers
        Ease of Use	        Higher-level (formatted I/O)	            Requires manual buffer management
        System Calls	    Indirect (hidden behind buffers)	        Direct (explicit calls)



>               Function	    Action	                            System Call Trigger
                fopen	        Opens a file	                    open()
                fclose	        Closes a file	                    close() + final write()/read()
                fflush	        Forces buffer write	                write()
                fprintf	        Writes formatted data to buffer	    write() on buffer full/flush
                fscanf	        Reads formatted data from buffer	read() on buffer empty
                fgetc	        Reads a character from buffer	    read() on buffer empty
                fputc	        Writes a character to buffer	        write() on buffer full


        > Example:
            Example: fwrite vs. write
                Using fwrite (buffered):

                        FILE *file = fopen("data.txt", "w");
                        fwrite(buffer, sizeof(char), 100, file); // Writes to a buffer
                        // ... More fwrite calls ...
                        fclose(file); // Buffer is flushed to disk via `write()`

                        System Calls: Only 1 write() when the buffer is full or on fclose().



                        int fd = open("data.txt", O_WRONLY);
                        write(fd, buffer, 100); // Direct system call
                        // ... More write calls ...
                        close(fd);

                        System Calls: Every write() triggers a system call.


Q) Why buffering is important:

            Buffered I/O handles partial writes/reads automatically (retries if needed).



> Example of writing a large data:

    Example: Buffered I/O Workflow
            1) Suppose you use fprintf to write 10,000 bytes to a file:

            2) fopen calls open() to get a file descriptor.

            3) fprintf writes data to the buffer (e.g., 4096-byte buffer).

            4) When the buffer is full, write() is called to write 4096 bytes.

            5) Repeat until all data is written.

            6) fclose calls close() and flushes any remaining data if buffer is partially filled in last fprintf.





> POSIX - syscall numbers:

    > in modern POSIX architecture syscall numbers are used instead of software interrupts to trigger syscalls

    ** Syscall numbers stay the same across kernel versions, while memory addresses change.


    Q) How the read() triggers the syscall:
    A) Via the syscall number:
        
            1) No Memory Address Needed:

                - The read() wrapper doesn’t call a memory address directly.

                - It uses a syscall number (__NR_read) and 
                the syscall instruction to ask the kernel to perform the operation.

            2) Syscall Table in the Kernel:

                - The kernel has a hardcoded table mapping syscall numbers to functions (e.g., sys_read, sys_write).

                - This table is initialized at boot time and never exposed to user space.

            3) Registers Are the Bridge:

                - Arguments are passed via CPU registers (rdi, rsi, rdx for fd, buf, count).

                - The syscall number goes in rax.


        Q) How Does libc Know the Syscall Number?
                
                The numbers are fixed for each architecture (e.g., __NR_read is 0 on x86_64 Linux, 3 on ARM).

                - They’re defined in kernel headers and baked into libc at compile time.

                - The syscall number acts as an indirect reference to the actual kernel function's memory address. 

                ** The syscall number is like an index into the kernel’s syscall table, which is an array of function pointers.




> Detailed Step-by-Step Breakdown of reading

    1. fopen("data.txt", "r") is called

        System Call: open() is invoked to get a file descriptor (e.g., fd = 3).

        FILE Struct Setup:

                A FILE object is created in memory.

                Its internal buffer (e.g., 4096 bytes) is initially empty (no data read yet).

                The file’s read position is set to 0 (start of file).


    2. First fscanf(fp, "%d", &value) is called
        
        Check Buffer: fscanf sees the FILE buffer is empty (no data preloaded).

        Trigger read():

            The standard I/O library calls read(fd, buffer, buffer_size) to fill the buffer.

            Since the file is only 2 bytes (23), read() returns 2 (bytes read).

            The buffer now contains: ['2', '3', GARBAGE, GARBAGE, ...] (only first 2 bytes are valid).

        Parse Data:

            fscanf starts reading from the buffer’s valid portion (23).

            It stops at the end of valid data (no more digits or EOF).

            The FILE struct’s internal pointer advances to pos = 2 (buffer consumed).


    3. What Triggers fscanf to Use the Buffer?

        Immediate Trigger: The mere act of calling fscanf checks the buffer’s state.

            If the buffer is empty, it calls read() to fill it.

            If the buffer has data (even 2 bytes), fscanf uses that data without calling read() again.

        No "Full Buffer" Requirement:

            fscanf doesn’t wait for the buffer to be "full" — it uses whatever is available (even 1 byte).

            In your case, the 2-byte 23 is sufficient to parse an integer, so no further read() occurs.


    4. What Happens on Subsequent fscanf Calls?
    
        If you call fscanf again:

            The buffer is now "logically empty" (pos = 2, no more valid data).

            Another read() is triggered, but since the file is exhausted, read() returns 0 (EOF).

            fscanf fails (returns EOF).




        Function	        Purpose	                    Equivalent to (POSIX)
        CreateFileA/W	    Open/create a file	        open
        ReadFile	        Read data from a file	    read
        WriteFile	        Write data to a file	    write
        CloseHandle	        Close a file handle	        close
        SetFilePointer	    Move the file pointer	    lseek
        GetFileSize	        Get the size of a file	    stat (partial)